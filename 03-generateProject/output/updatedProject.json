{
    "src\\api\\index.ts": "import express from \"express\";\r\nimport v1Routes from \"./v1/routes\";\r\n\r\nconst router = express.Router();\r\n\r\n// API Routes\r\nrouter.use(\"/v1\", v1Routes);\r\n\r\nexport default router;\r\n",
    "src\\api\\v1\\controllers\\index.ts": "export * as productController from \"./product.controller\";\r\n",
    "src\\api\\v1\\controllers\\product.controller.ts": "import { Request, Response } from \"express\";\r\nimport { productService } from \"../services\";\r\nimport { CreateProductDto, UpdateProductDto } from \"../dtos\";\r\n\r\n// Get all products\r\nexport const getAllProducts = async (req: Request, res: Response): Promise<void> => {\r\n  try {\r\n    const products = await productService.getAllProducts();\r\n    res.status(200).json(products);\r\n  } catch (error) {\r\n    console.error(\"Error fetching products:\", error);\r\n    res.status(500).json({ error: \"An error occurred while fetching products\" });\r\n  }\r\n};\r\n\r\n// Create a new product\r\nexport const createProduct = async (req: Request, res: Response): Promise<void> => {\r\n  const productData: CreateProductDto = req.body;\r\n  try {\r\n    const newProduct = await productService.createProduct(productData);\r\n    res.status(201).json(newProduct);\r\n  } catch (error) {\r\n    console.error(\"Error creating product:\", error);\r\n    res.status(500).json({ error: \"An error occurred while creating the product\" });\r\n  }\r\n};\r\n\r\n// Update a product\r\nexport const updateProduct = async (req: Request, res: Response): Promise<void> => {\r\n  const { id } = req.params;\r\n  const updateData: UpdateProductDto = req.body;\r\n  try {\r\n    const updatedProduct = await productService.updateProduct(id, updateData);\r\n    res.status(200).json(updatedProduct);\r\n  } catch (error) {\r\n    console.error(\"Error updating product:\", error);\r\n    res.status(500).json({ error: \"An error occurred while updating the product\" });\r\n  }\r\n};\r\n\r\n// Partially update a product\r\nexport const updateProductPart = async (req: Request, res: Response): Promise<void> => {\r\n  const { id } = req.params;\r\n  const updates: UpdateProductDto = req.body;\r\n  try {\r\n    const updatedProduct = await productService.updateProductPart(id, updates);\r\n    res.status(200).json(updatedProduct);\r\n  } catch (error) {\r\n    console.error(\"Error partially updating product:\", error);\r\n    res.status(500).json({ error: \"An error occurred while partially updating the product\" });\r\n  }\r\n};\r\n\r\n// Soft delete a product\r\nexport const deleteProduct = async (req: Request, res: Response): Promise<void> => {\r\n  const { id } = req.params;\r\n  try {\r\n    const deletedProduct = await productService.deleteProduct(id);\r\n    res.status(200).json(deletedProduct);\r\n  } catch (error) {\r\n    console.error(\"Error deleting product:\", error);\r\n    res.status(500).json({ error: \"An error occurred while deleting the product\" });\r\n  }\r\n};\r\n",
    "src\\api\\v1\\dtos\\index.ts": "export { CreateProductDto, UpdateProductDto } from \"./product.dto\";\r\n",
    "src\\api\\v1\\dtos\\product.dto.ts": "export interface CreateProductDto {\r\n  name: string;\r\n  price: number;\r\n}\r\n\r\nexport interface UpdateProductDto {\r\n  name?: string;\r\n  price?: number;\r\n}\r\n",
    "src\\api\\v1\\models\\index.ts": "export { default as ProductModel } from \"./product.model\";\r\n",
    "src\\api\\v1\\models\\product.model.ts": "interface Product {\r\n  id: string;\r\n  name: string;\r\n  price: number;\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n  deletedAt?: Date;\r\n}\r\n\r\nexport default Product;\r\n",
    "src\\api\\v1\\repositories\\index.ts": "export * as productRepository from \"./product.repository\";\r\n",
    "src\\api\\v1\\repositories\\product.repository.ts": "import { ProductModel } from \"../models\";\r\nimport { CreateProductDto, UpdateProductDto } from \"../dtos\";\r\nimport prisma from \"../../../config/prisma\";\r\n\r\n// Get all products\r\nexport const findAll = async (): Promise<ProductModel[]> => {\r\n  return await prisma.product.findMany();\r\n};\r\n\r\n// Create a product\r\nexport const create = async (productData: CreateProductDto): Promise<ProductModel> => {\r\n  return await prisma.product.create({\r\n    data: productData,\r\n  });\r\n};\r\n\r\n// Update a product\r\nexport const update = async (id: string, updateData: UpdateProductDto): Promise<ProductModel> => {\r\n  return await prisma.product.update({\r\n    where: { id },\r\n    data: updateData,\r\n  });\r\n};\r\n\r\n// Soft delete a product\r\nexport const softDelete = async (id: string): Promise<ProductModel> => {\r\n  return await prisma.product.update({\r\n    where: { id },\r\n    data: { deletedAt: new Date() },\r\n  });\r\n};\r\n",
    "src\\api\\v1\\routes\\index.ts": "import express from \"express\";\r\nimport productRoutes from \"./product.route\";\r\n\r\nconst router = express.Router();\r\n\r\n// API routes\r\nrouter.use(\"/products\", productRoutes);\r\n\r\nexport default router;\r\n",
    "src\\api\\v1\\routes\\product.route.ts": "import { Router } from \"express\";\r\nimport { productController } from \"../controllers\";\r\n\r\nconst router = Router();\r\n\r\n// Product routes\r\nrouter\r\n  .route(\"/\")\r\n  .get(productController.getAllProducts)  // GET /products - Fetch all products\r\n  .post(productController.createProduct); // POST /products - Create a new product\r\n\r\nrouter\r\n  .route(\":id\")\r\n  .put(productController.updateProduct)  // PUT /products/:id - Update product (full replacement)\r\n  .patch(productController.updateProductPart)  // PATCH /products/:id - Partially update product\r\n  .delete(productController.deleteProduct);  // DELETE /products/:id - Soft delete a product\r\n\r\nexport default router;\r\n",
    "src\\api\\v1\\services\\index.ts": "export * as productService from \"./product.service\";\r\n",
    "src\\api\\v1\\services\\product.service.ts": "import { ProductModel } from \"../models\";\r\nimport { CreateProductDto, UpdateProductDto } from \"../dtos\";\r\nimport { productRepository } from \"../repositories\";\r\n\r\n// Get all products\r\nexport const getAllProducts = async (): Promise<ProductModel[]> => {\r\n  return await productRepository.findAll();\r\n};\r\n\r\n// Create a product\r\nexport const createProduct = async (productData: CreateProductDto): Promise<ProductModel> => {\r\n  return await productRepository.create(productData);\r\n};\r\n\r\n// Update a product\r\nexport const updateProduct = async (id: string, updateData: UpdateProductDto): Promise<ProductModel> => {\r\n  return await productRepository.update(id, updateData);\r\n};\r\n\r\n// Partially update a product\r\nexport const updateProductPart = async (id: string, updates: UpdateProductDto): Promise<ProductModel> => {\r\n  return await productRepository.update(id, updates);\r\n};\r\n\r\n// Delete a product\r\nexport const deleteProduct = async (id: string): Promise<ProductModel> => {\r\n  return await productRepository.softDelete(id);\r\n};\r\n",
    "src\\app.ts": "import express, { Request, Response } from \"express\";\r\nimport apiRoutes from \"./api\";\r\n\r\nconst app = express();\r\n\r\n/* -----> Express Built-in Middlewares <----- */\r\napp.use(express.json());\r\n\r\n/* -----> Routes <----- */\r\n\r\n// Home route\r\napp.get(\"/\", (req: Request, res: Response) => {\r\n  console.log(\"I am Home Route\");\r\n  res.send(\"I am Home route\");\r\n});\r\n\r\n/* -----> API Routes <----- */\r\napp.use(\"/api\", apiRoutes);\r\n\r\n/* -----> Error Handling for Non-existent Routes <----- */\r\napp.use((req: Request, res: Response) => {\r\n  res.status(404).json({ message: \"Route not found\" });\r\n});\r\n\r\nexport default app;\r\n",
    "src\\config\\prisma.ts": "const { PrismaClient } = require(\"@prisma/client\");\r\nconst prisma = new PrismaClient();\r\nexport default prisma;\r\n",
    "src\\server.ts": "import prisma from \"./config/prisma\";\r\nimport path from \"path\";\r\nimport dotenv from \"dotenv\";\r\n\r\n/* -----> Express Instance <----- */\r\nimport app from \"./app\";\r\n\r\n// Load environment variables\r\ndotenv.config({ path: path.resolve(__dirname, \"../.env\") });\r\n\r\n// Server Port\r\nconst port = process.env.PORT ?? 5000;\r\n\r\n// Start Server\r\napp.listen(port, () => {\r\n  console.log(`Server running on port ${port}`);\r\n});\r\n\r\n// Test Database Connection\r\nasync function testDbConnection() {\r\n  try {\r\n    await prisma.$connect();\r\n    console.log(\"Connected to the database successfully.\");\r\n  } catch (error) {\r\n    console.error(\"Failed to connect to the database:\", error);\r\n  } finally {\r\n    await prisma.$disconnect();\r\n  }\r\n}\r\ntestDbConnection();\r\n"
  }
  